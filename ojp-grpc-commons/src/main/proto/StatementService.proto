syntax = "proto3";
option java_multiple_files = true;
package com.openjdbcproxy.grpc;

message ConnectionDetails {
    string url = 1;
    string user = 2;
    string password = 3;
    string clientUUID = 4;
}

message SessionInfo {
    string connHash = 1;
    string clientUUID = 2;
    //only set if connection has to be the same among different requests, within transaction boundaries or when using LOB objects.
    string sessionUUID = 3;
}

message ResultSetId {
    string uuid = 1;
}

enum ResultType {
    INTEGER = 0;
    RESULT_SET_DATA = 1;
}

enum LobType {
    BINARY = 0;
    CHARACTER = 1;
}

message OpResult {
    SessionInfo session = 1;
    ResultType type = 2;
    bytes value = 3;
}

message StatementRequest {
    SessionInfo session = 1;
    string sql = 2;
    bytes parameters = 3;
}

message SqlErrorResponse {
    string reason = 1;
    string sqlState = 2;
    int32 vendorCode = 3;
}

message LobReference {
    SessionInfo session = 1;
    string uuid = 2;
    int32 bytesWritten = 3;
}

message ReadLobRequest {
    LobReference lobReference = 1;
    int64 position = 2;
    int32 length = 3;
}

message LobDataBlock {
    SessionInfo session = 1;
    int64 position = 2;
    bytes data = 3;
}

message SessionTerminationStatus {
    bool terminated = 1;
}

enum ResourceType {
    RESULT_SET = 0;
    STATEMENT = 1;
    PREPARED_STATEMENT = 2;
    BLOB = 3;
}

message CloseResourceRequest {
    ResultType type = 1;
}

message CloseResourceResponse {
    bool closed = 1;
}

service StatementService {
    rpc connect(ConnectionDetails) returns (SessionInfo);
    rpc executeUpdate(StatementRequest) returns (OpResult);
    rpc executeQuery(StatementRequest) returns (stream OpResult);
    rpc createLob(stream LobDataBlock) returns (stream LobReference);
    rpc readLob(ReadLobRequest) returns (stream LobDataBlock);
    rpc terminateSession(SessionInfo) returns (SessionTerminationStatus);
    //TODO this will close the resource and remove it from session ad closing session if no resource left,
    // need to test with Blob because block does not have a close method, it has a free method, now does JPA for example
    // call that free method? Because JPA with Hikari CP will not call close on the connection
    // --> I can relate the Blob to the resource it is being used on, if that or those resources all close I can close
    // the Blob and remove it from the session.
    rpc closeResource(CloseResourceRequest) returns (CloseResourceResponse);
}