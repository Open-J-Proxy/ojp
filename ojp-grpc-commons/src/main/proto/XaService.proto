syntax = "proto3";
option java_multiple_files = true;
package com.openjproxy.grpc.xa;

import "StatementService.proto";

// Represents a distributed transaction identifier (Xid)
message XidProto {
    int32 formatId = 1;
    bytes globalTransactionId = 2;
    bytes branchQualifier = 3;
}

// XA connection request
message XaConnectionRequest {
    string url = 1;
    string user = 2;
    string password = 3;
    string clientUUID = 4;
    bytes properties = 5;
}

// XA connection response containing session info for XA operations
message XaConnectionResponse {
    string xaSessionUUID = 1;
    string connHash = 2;
    string clientUUID = 3;
}

// Request to start an XA transaction
message XaStartRequest {
    string xaSessionUUID = 1;
    XidProto xid = 2;
    int32 flags = 3;
}

// Request to end an XA transaction
message XaEndRequest {
    string xaSessionUUID = 1;
    XidProto xid = 2;
    int32 flags = 3;
}

// Request to prepare an XA transaction
message XaPrepareRequest {
    string xaSessionUUID = 1;
    XidProto xid = 2;
}

// Response for prepare operation
message XaPrepareResponse {
    int32 result = 1; // XA_OK or XA_RDONLY
}

// Request to commit an XA transaction
message XaCommitRequest {
    string xaSessionUUID = 1;
    XidProto xid = 2;
    bool onePhase = 3;
}

// Request to rollback an XA transaction
message XaRollbackRequest {
    string xaSessionUUID = 1;
    XidProto xid = 2;
}

// Request to recover XIDs
message XaRecoverRequest {
    string xaSessionUUID = 1;
    int32 flag = 2;
}

// Response for recover operation
message XaRecoverResponse {
    repeated XidProto xids = 1;
}

// Request to forget an XA transaction
message XaForgetRequest {
    string xaSessionUUID = 1;
    XidProto xid = 2;
}

// Request to set transaction timeout
message XaSetTransactionTimeoutRequest {
    string xaSessionUUID = 1;
    int32 seconds = 2;
}

// Response for set transaction timeout
message XaSetTransactionTimeoutResponse {
    bool success = 1;
}

// Request to get transaction timeout
message XaGetTransactionTimeoutRequest {
    string xaSessionUUID = 1;
}

// Response for get transaction timeout
message XaGetTransactionTimeoutResponse {
    int32 seconds = 1;
}

// Request to check if two XIDs are the same
message XaIsSameRMRequest {
    string xaSessionUUID = 1;
    string otherXaSessionUUID = 2;
}

// Response for isSameRM check
message XaIsSameRMResponse {
    bool isSame = 1;
}

// Generic response for operations that don't return data
message XaResponse {
    bool success = 1;
    string message = 2;
}

// Request to close XA connection
message XaCloseRequest {
    string xaSessionUUID = 1;
}

// Service definition for XA operations
service XaService {
    // Create an XA connection
    rpc xaConnect(XaConnectionRequest) returns (XaConnectionResponse);
    
    // Start work on behalf of a transaction branch
    rpc xaStart(XaStartRequest) returns (XaResponse);
    
    // End work on behalf of a transaction branch
    rpc xaEnd(XaEndRequest) returns (XaResponse);
    
    // Prepare to commit the transaction branch
    rpc xaPrepare(XaPrepareRequest) returns (XaPrepareResponse);
    
    // Commit the transaction branch
    rpc xaCommit(XaCommitRequest) returns (XaResponse);
    
    // Rollback the transaction branch
    rpc xaRollback(XaRollbackRequest) returns (XaResponse);
    
    // Obtain a list of prepared transaction branches
    rpc xaRecover(XaRecoverRequest) returns (XaRecoverResponse);
    
    // Forget about a heuristically completed transaction branch
    rpc xaForget(XaForgetRequest) returns (XaResponse);
    
    // Set transaction timeout
    rpc xaSetTransactionTimeout(XaSetTransactionTimeoutRequest) returns (XaSetTransactionTimeoutResponse);
    
    // Get transaction timeout
    rpc xaGetTransactionTimeout(XaGetTransactionTimeoutRequest) returns (XaGetTransactionTimeoutResponse);
    
    // Check if another XAResource represents the same resource manager
    rpc xaIsSameRM(XaIsSameRMRequest) returns (XaIsSameRMResponse);
    
    // Close XA connection
    rpc xaClose(XaCloseRequest) returns (XaResponse);
}
